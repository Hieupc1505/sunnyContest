// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type ContestState string

const (
	ContestStateIDLE     ContestState = "IDLE"
	ContestStateRUNNING  ContestState = "RUNNING"
	ContestStateFINISHED ContestState = "FINISHED"
	ContestStateWAITING  ContestState = "WAITING"
)

func (e *ContestState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContestState(s)
	case string:
		*e = ContestState(s)
	default:
		return fmt.Errorf("unsupported scan type for ContestState: %T", src)
	}
	return nil
}

type NullContestState struct {
	ContestState ContestState `json:"contest_state"`
	Valid        bool         `json:"valid"` // Valid is true if ContestState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContestState) Scan(value interface{}) error {
	if value == nil {
		ns.ContestState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContestState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContestState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContestState), nil
}

type LevelQuestion string

const (
	LevelQuestionEASY   LevelQuestion = "EASY"
	LevelQuestionMEDIUM LevelQuestion = "MEDIUM"
	LevelQuestionHARD   LevelQuestion = "HARD"
)

func (e *LevelQuestion) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LevelQuestion(s)
	case string:
		*e = LevelQuestion(s)
	default:
		return fmt.Errorf("unsupported scan type for LevelQuestion: %T", src)
	}
	return nil
}

type NullLevelQuestion struct {
	LevelQuestion LevelQuestion `json:"level_question"`
	Valid         bool          `json:"valid"` // Valid is true if LevelQuestion is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLevelQuestion) Scan(value interface{}) error {
	if value == nil {
		ns.LevelQuestion, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LevelQuestion.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLevelQuestion) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LevelQuestion), nil
}

type SfContest struct {
	ID            int64              `json:"id"`
	UserID        int64              `json:"user_id"`
	SubjectID     int64              `json:"subject_id"`
	NumQuestion   int32              `json:"num_question"`
	TimeExam      int32              `json:"time_exam"`
	TimeStartExam pgtype.Timestamptz `json:"time_start_exam"`
	State         ContestState       `json:"state"`
	Questions     string             `json:"questions"`
	CreatedTime   time.Time          `json:"created_time"`
	UpdatedTime   time.Time          `json:"updated_time"`
}

type SfProfile struct {
	ID          int64     `json:"id"`
	UserID      int64     `json:"user_id"`
	Nickname    string    `json:"nickname"`
	Avatar      string    `json:"avatar"`
	CreatedTime time.Time `json:"created_time"`
	UpdatedTime time.Time `json:"updated_time"`
}

type SfQuestion struct {
	ID            int64         `json:"id"`
	SubjectID     int64         `json:"subject_id"`
	UserID        int64         `json:"user_id"`
	Level         LevelQuestion `json:"level"`
	Question      string        `json:"question"`
	QuestionType  string        `json:"question_type"`
	QuestionImage pgtype.Text   `json:"question_image"`
	Answers       string        `json:"answers"`
	AnswerType    string        `json:"answer_type"`
	State         int32         `json:"state"`
	CreatedTime   time.Time     `json:"created_time"`
	UpdatedTime   time.Time     `json:"updated_time"`
}

type SfSubject struct {
	ID          int64       `json:"id"`
	UserID      int64       `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Tags        pgtype.Text `json:"tags"`
	State       int32       `json:"state"`
	CreatedTime time.Time   `json:"created_time"`
	UpdatedTime time.Time   `json:"updated_time"`
}

type SfUser struct {
	ID           int64              `json:"id"`
	Username     string             `json:"username"`
	Password     string             `json:"password"`
	Role         int32              `json:"role"`
	Status       int32              `json:"status"`
	Token        pgtype.Text        `json:"token"`
	TokenExpired pgtype.Timestamptz `json:"token_expired"`
	CreatedTime  time.Time          `json:"created_time"`
	UpdatedTime  time.Time          `json:"updated_time"`
}

type SfUserContest struct {
	ID          int64           `json:"id"`
	ContestID   int64           `json:"contest_id"`
	UserID      int64           `json:"user_id"`
	Questions   json.RawMessage `json:"questions"`
	Exam        []byte          `json:"exam"`
	Result      []byte          `json:"result"`
	CreatedTime time.Time       `json:"created_time"`
	UpdatedTime time.Time       `json:"updated_time"`
}
