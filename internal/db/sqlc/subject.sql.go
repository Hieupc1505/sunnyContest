// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subject.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSubject = `-- name: AddSubject :one
INSERT INTO sf_subject (
    user_id, name, description, tags, state, created_time
) VALUES (
             $1, $2, $3, $4, $5, now()
         )
    RETURNING id, name, description, tags, state, created_time
`

type AddSubjectParams struct {
	UserID      int64       `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Tags        pgtype.Text `json:"tags"`
	State       int32       `json:"state"`
}

type AddSubjectRow struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Tags        pgtype.Text `json:"tags"`
	State       int32       `json:"state"`
	CreatedTime time.Time   `json:"created_time"`
}

func (q *Queries) AddSubject(ctx context.Context, arg AddSubjectParams) (AddSubjectRow, error) {
	row := q.db.QueryRow(ctx, addSubject,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.State,
	)
	var i AddSubjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.State,
		&i.CreatedTime,
	)
	return i, err
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM sf_subject WHERE id = $1
`

func (q *Queries) DeleteSubject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubject, id)
	return err
}

const getAllSubjects = `-- name: GetAllSubjects :many
SELECT id, user_id, name, description, tags, state, created_time, updated_time FROM sf_subject
ORDER BY created_time DESC
    LIMIT $1 OFFSET $2
`

type GetAllSubjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllSubjects(ctx context.Context, arg GetAllSubjectsParams) ([]SfSubject, error) {
	rows, err := q.db.Query(ctx, getAllSubjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SfSubject{}
	for rows.Next() {
		var i SfSubject
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Tags,
			&i.State,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubjectByID = `-- name: GetSubjectByID :one
SELECT id, user_id, name, description, tags, state, created_time, updated_time FROM sf_subject WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubjectByID(ctx context.Context, id int64) (SfSubject, error) {
	row := q.db.QueryRow(ctx, getSubjectByID, id)
	var i SfSubject
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.State,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const updateSubject = `-- name: UpdateSubject :one
UPDATE sf_subject
SET
    name = $2,
    description = $3,
    tags = $4,
    updated_time = now()
WHERE id = $1
RETURNING id, user_id, name, description, tags, state, created_time
`

type UpdateSubjectParams struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Tags        pgtype.Text `json:"tags"`
}

type UpdateSubjectRow struct {
	ID          int64       `json:"id"`
	UserID      int64       `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Tags        pgtype.Text `json:"tags"`
	State       int32       `json:"state"`
	CreatedTime time.Time   `json:"created_time"`
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) (UpdateSubjectRow, error) {
	row := q.db.QueryRow(ctx, updateSubject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Tags,
	)
	var i UpdateSubjectRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.State,
		&i.CreatedTime,
	)
	return i, err
}
